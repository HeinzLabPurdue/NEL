% filename = strcat(FILEPREFIX,num2str(FNUM),'.m');global root_dir NelDatafilename = current_data_file('tc');Channel = 1;frqlo = PARAMS(1);frqhi = PARAMS(2);octaves = log2(frqhi/frqlo);linstps = PARAMS(3);logstps = PARAMS(4);if logstps > 0,   frqlst=logspace(log10(frqhi),log10(frqlo),octaves*logstps);else   frqlst=linspace(frqhi,frqlo,octaves*linstps);endfrqnum = length(frqlst);attlo  = PARAMS(5);attstp = PARAMS(7);atthi  = PARAMS(6);atten  = attlo;ear = PARAMS(10);left  = 1;right = 2;config(1) = struct('atten',[1 0],'sel',[0 7],'conn',[2 0]); %left ear select codeconfig(2) = struct('atten',[0 1],'sel',[7 4],'conn',[0 1]); %right ear select codeconfig(3) = struct('atten',[1 1],'sel',[0 4],'conn',[2 1]); %both ears selectedToneOn  = PARAMS(11);ToneOff = PARAMS(12);tspan = (ToneOn+ToneOff)/1000;handles = get(gcf,'Userdata');			h_ax1   = handles(8);   if (ishandle(h_ax1))   delete(h_ax1);endh_ax1 = axes('position',[.1 .415-0.08 .8 .56+0.08]);handles(8) = h_ax1;set(gcf,'Userdata',handles);h_line1 = semilogx(50,0,'r-','LineWidth',2,'EraseMode','none');hold on;h_line2 = plot(50,0,'wo','MarkerSize',6,'EraseMode','xor');axis([frqlo frqhi -atthi-5 -attlo+5]);set(h_ax1,'XTick',[frqlo+.000001 frqhi],'TickDir','out');set(h_ax1, 'XTick', ...   unique(min(frqhi,max(frqlo, [frqlo+.000001 0.1 0.2 0.4 1 2 4 7 10 15 20:10:50 100 frqhi]))));set(h_ax1, 'XMinorTick', 'off');set(h_ax1,'YTick',[-120:20:0]);xlabel('Frequency (kHz)','fontsize',14);ylabel('Attenuation (dB)','fontsize',14);set(h_ax1,'Color',[0.3 0.3 0.3]);drawnow;match2    = PARAMS(8);crit = PARAMS(9);tcdata = zeros(frqnum,2);    search = 'on';RespWin1= PARAMS(13)/1000;RespWin2= PARAMS(14)/1000;SponWin1= PARAMS(15)/1000;SponWin2= PARAMS(16)/1000;SponSamp1= PARAMS(17);SponSamp2= PARAMS(18);if SponSamp1,      %user has elected to sample spont1   set(h_text7,'String','Collecting SR1...');      spont1 = 0;   % [seq time] = msds(1,1,1,1);   msdl(1,Channel);      RPco1=actxcontrol('RPco.x',[0 0 1 1]);   invoke(RPco1,'Connect',4,1);   invoke(RPco1,'LoadCof',[root_dir 'tuning_curve\object\sr.rco']);   invoke(RPco1,'Run');   timer(SponSamp1);   spk = msdl(2);   spont1 = size(spk{Channel},1) / SponSamp1;         %     while max(seq) <= SponSamp1   %         drawnow;   %         if get(h_push_stop,'Userdata'), break; end   %         [seq time] = msds(1,1,SponSamp1+1,2);   %         spont1 = spont1 + length(find(time>0 & seq<=SponSamp1));   %     end   %     spont1 = spont1/SponSamp1;   invoke(RPco1,'Halt');   msdl(0);endRPco1=actxcontrol('RPco.x',[0 0 1 1]);invoke(RPco1,'Connect',4,1);invoke(RPco1,'LoadCof',[root_dir 'tuning_curve\object\tc_left.rco']);% invoke(RPco1,'LoadCof','d:\Matlab_user\tuning_curve\object\tc_left_for_debug.rco');invoke(RPco1,'SetTagVal','Select_L',config(ear).sel(left));invoke(RPco1,'SetTagVal','Connect_L',config(ear).conn(left));invoke(RPco1,'SetTagVal','StmOn',ToneOn);invoke(RPco1,'SetTagVal','StmOff',ToneOff);invoke(RPco1,'Run');RPco2=actxcontrol('RPco.x',[0 0 1 1]);invoke(RPco2,'Connect',4,2);invoke(RPco2,'LoadCof',[root_dir 'tuning_curve\object\tc_right']);invoke(RPco2,'SetTagVal','Select_R',config(ear).sel(right));invoke(RPco2,'SetTagVal','Connect_R',config(ear).conn(right));invoke(RPco2,'Run');PAco1=actxcontrol('PA5.x',[0 0 1 1]);for atten_num = 1:4,   invoke(PAco1,'Connect',4,atten_num);   invoke(PAco1,'SetAtten',120.0);endif config(ear).atten(left),   invoke(PAco1,'Connect',4,1);   invoke(PAco1,'SetAtten',0);   invoke(PAco1,'Connect',4,3);   invoke(PAco1,'SetAtten',atten);else   invoke(PAco1,'Connect',4,1);   invoke(PAco1,'SetAtten',120.0);   invoke(PAco1,'Connect',4,3);   invoke(PAco1,'SetAtten',120.0);endif config(ear).atten(right),   invoke(PAco1,'Connect',4,2);   invoke(PAco1,'SetAtten',0);   invoke(PAco1,'Connect',4,4);   invoke(PAco1,'SetAtten',atten);else   invoke(PAco1,'Connect',4,2);   invoke(PAco1,'SetAtten',120.0);   invoke(PAco1,'Connect',4,4);   invoke(PAco1,'SetAtten',120.0);endfor run = 1:frqnum,   if get(h_push_stop,'Userdata'), break; end   new_freq = 0;   freq = frqlst(run);   level_stk = zeros(1,6);   invoke(RPco1,'SetTagVal','Freq',freq*1000);   while ~length(get(h_push_stop,'Userdata')),  		%check for stop here      % [seq time] = msds(1,1,1,1);      msdl(1,Channel);      DRnow = 0;      SRnow = 0;      if config(ear).atten(left),         invoke(PAco1,'Connect',4,3);         invoke(PAco1,'SetAtten',atten);      end      if config(ear).atten(right),         invoke(PAco1,'Connect',4,4);         invoke(PAco1,'SetAtten',atten);      end      set(h_line2,'XData',freq,'YData',-atten);      drawnow;      invoke(RPco1,'SoftTrg',1);      % tic;      % TIMER!!      timer(tspan);      spk = msdl(2);      time = spk{Channel}(:,2);      DRnow = length(find(time>RespWin1 & time<RespWin2));      SRnow = length(find(time>SponWin1 & time<SponWin2));%       while toc < tspan,%          [seq time] = msds(1,tspan,1,2);%          spikes = find(seq==1);%          DRnow = DRnow + length(find(time(spikes)>RespWin1 & time(spikes)<RespWin2));%          SRnow = SRnow + length(find(time(spikes)>SponWin1 & time(spikes)<SponWin2));%       end      % [seq time] = msds(1,1,1,0);      msdl(0);      idiff = DRnow - SRnow;      if strcmp(search,'on') & idiff>(5*crit+5),         search = 'off';         new_freq = 1;      else         level_stk(2:6) = level_stk(1:5);         level_stk(1) = atten;         if idiff>crit,            atten = atten + attstp;            if atten <= atthi,               if (match2==1 & atten==level_stk(3)) | (match2==2 & atten==level_stk(3) & atten==level_stk(6)),                  if strcmp(search,'on'), search = 'off'; end                  new_freq = 1;               end            end         else            atten = atten - 2*attstp;            if atten < attlo, atten = attlo; new_freq = 1; end         end      end      %if new freq, plot thresh and break      if new_freq == 1,         %save threshold         tcdata(run,:) = [freq atten];         set(h_line1,'XData',tcdata(1:run,1),'YData',-tcdata(1:run,2));         drawnow;         atten = max(attlo,atten-12); %don't reset atten all the way back to attenlo         set(h_push_start,'Userdata',tcdata);                  text_str = sprintf('%s %4.3f %s %4.1f %s\n%s %5.1f %s','Stimulus:',tcdata(run,1),'kHz and',tcdata(run,2), ...            'dB atten.', 'Current SR:',SRnow/(SponWin2-SponWin1),'sp/s.');         set(h_text7,'String',text_str,'Interpreter','none');         drawnow;         break;      end   endendfor atten_num = 1:4,   invoke(PAco1,'Connect',4,atten_num);   invoke(PAco1,'SetAtten',120.0);endinvoke(RPco1,'Halt');invoke(RPco2,'Halt');if SponSamp2,      %user has elected to sample spont1   set(h_text7,'String','Collecting SR2...');      spont1 = 0;   % [seq time] = msds(1,1,1,1);   msdl(1,Channel);      RPco1=actxcontrol('RPco.x',[0 0 1 1]);   invoke(RPco1,'Connect',4,1);   invoke(RPco1,'LoadCof',[root_dir 'tuning_curve\object\sr.rco']);   invoke(RPco1,'Run');   timer(SponSamp2);   spk = msdl(2);   spont2 = size(spk{Channel},1) / SponSamp2;         %     while max(seq) <= SponSamp2   %         drawnow;   %         if get(h_push_stop,'Userdata'), break; end   %         [seq time] = msds(1,1,SponSamp2+1,2);   %         spont2 = spont2 + length(find(time>0 & seq<=SponSamp2));   %     end   %     spont2 = spont2/SponSamp2;   invoke(RPco1,'Halt');   msdl(0);endlast_stim = run;loc = find(tcdata(1:run,2)==max(tcdata(1:run,2)));thresh = tcdata(loc(1),2);bf = tcdata(loc(1),1);fprintf('Estimated BF = %.4f   Threshold = %.4f\n', bf, thresh);NelData.TC.BF = bf;NelData.TC.Th = thresh;set(h_line2,'XData',bf,'YData',-thresh);if SponSamp1,   line1 = sprintf('%s %5.1f %s','First SR average is',spont1,'sp/s.');else   line1 = sprintf('%s','First SR was not sampled.');endif SponSamp2,   line2 = sprintf('%s %5.1f %s','Second SR average is',spont2,'sp/s.');else   line2 = sprintf('%s','Second SR was not sampled.');endtext_str = sprintf('%s %6.3f %s\n%s %4.1f %s\n%s\n%s',...   'Best frequency is',bf,'kHz.',...   'Threshold is',thresh,'dB atten.',...   line1,...   line2);set(h_text7,'String',text_str);if (strcmp(debug_mode,'Debug'))   return;endset(h_push_stop,'Enable','off');switch (get(h_push_stop,'Userdata'))case 'saveNquit'    ButtonName = 'Yes';    comment='No comment.';    case 'stop'    [ButtonName]=questdlg('Do you wish to save these data?', ...        'Save Prompt', ...        'Yes','No','Comment','Yes');    drawnow;    switch ButtonName,    case 'Yes',        comment='No comment.';    case 'Comment'        comment=add_tc_comment_line;	%add a comment line before saving data file    end% case 'Quit'%     uiresume;%     tuning_curve('close');%     return;endif strcmp(ButtonName,'Yes') |  strcmp(ButtonName,'Comment'),   set(h_push_start,'Enable','off');   set(h_push_recall,'Enable','off');   set(h_push_close,'Enable','off');   set(h_push_params,'Enable','off');   set(h_text7,'String','Saving data file...');   make_tc_text_file;   update_tc_params;   filename = current_data_file('tc');   uiresume;   tuning_curve('close');   return;   % filename = strcat(FILEPREFIX,num2str(FNUM),'.m');   % make_explist;end% set(h_text1,'Visible','on');% set(h_text2,'String',{PROG date});% set(h_text2,'Visible','on');set(h_text7,'String','Waiting for input.');% delete(h_ax1);