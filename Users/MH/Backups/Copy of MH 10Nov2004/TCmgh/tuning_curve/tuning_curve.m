function h_fig = tuning_curve(command_str)%THIS IS THE MAIN PROGRAM FOR THE SR530 LOCK-IN AMP%     MAJOR FUNCTION CALLS ARE:%THE FOLLOWING GLOBAL PARAMETERS ARE SHARED ACROSS FUNCTIONSglobal PARAMS PROG VERSION VOLTS global root_dirh_fig = findobj('Tag','TC_Main_Fig');if nargin < 1						   %program should be called without a command string		if strcmp(computer,'PCWIN')	%set path characters for PC or MAC		is_enabled = 'on';	elseif strcmp(computer,'MAC2')		is_enabled = 'off';	end	is_enabled = 'on';		PARAMS = zeros(1,16);				%initialize before opening parameter files	PROG = 'TCrp2.m';						%program name is recorded in the data file	DATE = date;	VERSION = 'Nel';	% cd(fullfile(strtok(matlabroot,filesep),'matlab_user','tuning_curve','functions',''));		eval('get_tc_ins');							   %open stimulus parameters		PARAMS(1) = frqlo;     %low frequency (in kHz) bounds for data	PARAMS(2) = frqhi;     %high frequency (in kHz) bounds for data	PARAMS(3) = fstlin;    %linear frequency step (in kHz) (set = 0 for log steps)	PARAMS(4) = fstoct;    %log frequency step (in octaves) (set = 0 for linear steps)	PARAMS(5) = attlo;     %low atten (in dB) bounds for auto tracking	PARAMS(6) = atthi;     %high stten (in dB) bounds for auto tracking	PARAMS(7) = attstp;    %initial atten step size	PARAMS(8) = match2;    %criterion for threshold repeat (1 or 2)	PARAMS(9) = crit;      %criterion for response in SDs above spont	PARAMS(10)= ear;       %code for select/connect and attenuators	PARAMS(11)= ToneOn;      %tone on duration in ms	PARAMS(12)= ToneOff;      %tone off duration in ms	PARAMS(13)= RespWin1;      %onset of resp sps sampling	PARAMS(14)= RespWin2;      %end of resp sps sampling	PARAMS(15)= SponWin1;      %onset of spon sps sampling	PARAMS(16)= SponWin2;      %end of spon sps sampling	PARAMS(17)= SponSamp1;      %flag to disable spont sample before and after TC (0=no sample)	PARAMS(18)= SponSamp2;      %flag to disable spont sample before and after TC (0=no sample)			command_str = 'initialize';		%set command string to initialize graphic interfaceendif ~strcmp(command_str,'initialize')		%you're returning via callback, retrieve figure handles	% cd(fullfile(strtok(matlabroot,filesep),'matlab_user','tuning_curve','functions',''));		load(fullfile(root_dir,'tuning_curve','workspace','tcbjm'));	handles = get(gcf,'Userdata');				h_text1 = handles(1);	h_text2 = handles(2);	h_text3 = handles(3);	h_text4 = handles(4);	h_text5 = handles(5);	h_text6 = handles(6);   	h_text7 = handles(7);   	h_ax1   = handles(8);   	h_line1 = handles(9);	h_ax2   = handles(10);   	h_ax3   = handles(11);   	h_push_stop  = handles(12);	h_push_start = handles(13);	h_push_close = handles(14);	h_push_params = handles(15);	h_push_recall = handles(16);		tcdata = get(h_push_start,'Userdata');endif strcmp(command_str,'initialize');		   %initialize and display GUI   if (ishandle(h_fig))      delete(h_fig);   end   h_fig = figure('NumberTitle','off','Name','Tuning Curve Maker','Units','normalized',...      'Visible','off', 'position',[0.045  0.013  0.9502  0.7474],'MenuBar','none','Tag','TC_Main_Fig');   colordef none;   whitebg('w');		%the following text handles are used to display parameters	if PARAMS(3) == 0,		log_txt = 'yes';	elseif PARAMS(4) == 0,		log_txt = 'no';	end	step_txt = max(PARAMS(3), PARAMS(4));		switch PARAMS(10)	case 1,		ear_txt = 'left';	case 2,		ear_txt = 'right';	case 3,		ear_txt = 'both';	end	eval('tcplot');			handles = [h_text1, h_text2, h_text3, h_text4, h_text5, h_text6, h_text7, h_ax1, h_line1, h_ax2, h_ax3, h_push_stop, h_push_start, h_push_close, h_push_params h_push_recall];	%put everything in a handle for the call back	set(h_fig,'Userdata',handles);	%save the workspace so you can return to this point on callback from other functions	feval('save',fullfile(root_dir,'tuning_curve','workspace','tcbjm'),'PARAMS','PROG','VERSION');	set(h_fig,'Visible','on');    tuning_curve('start'); % Auto start    elseif strcmp(command_str,'return from parameter change')	if PARAMS(3) == 0,		log_txt = 'yes';	elseif PARAMS(4) == 0,		log_txt = 'no';	end	step_txt = max(PARAMS(3), PARAMS(4));	    switch PARAMS(10)    case 1,        ear_txt = 'left';    case 2,        ear_txt = 'right';    case 3,        ear_txt = 'both';    end        set(h_text2,'String',{PROG date fliplr(strtok(fliplr(current_data_file),filesep))});    set(h_text4,'string', {PARAMS(1); PARAMS(2); step_txt; log_txt});    set(h_text6,'string', {PARAMS(5); PARAMS(6); PARAMS(7); ear_txt});    set(h_push_recall,'Enable','off');    set(h_push_close,'Enable','on');    set(h_push_params,'Enable','on');        %perform calibration, plot resultselseif strcmp(command_str,'start')    set(h_text1,'Visible','off');    set(h_text2,'Visible','off');    set(h_push_stop,'Enable','on');    set(h_push_start,'Enable','off');    set(h_push_recall,'Enable','on');    set(h_push_close,'Enable','off');    set(h_push_params,'Enable','off');    error = 0;    tcdata = zeros(120,2);    set(h_push_stop,'Userdata',[]);    set(h_push_start,'Userdata',tcdata);								%user has pressed the stop button, set run_flag to end test    	%****** Data collection loop ******   % debug_mode = questdlg('Debug Mode','tc','Debug','Normal','Normal');   debug_mode = 'Normal';   switch(debug_mode)   case 'Debug'       %       for tc_loop = 1:1000       %          eval('tc','msdl(0)');       %          copyfile('d:\tmp\tc_debug.txt','d:\tmp\tc_debug_bak.txt');       %          fid = fopen('d:\tmp\tc_debug.txt','w');       %          if (fid < 0)       %             error('cant open tc_debug file');       %          end       %          fprintf(fid,'Finished running tc for the %d time\n', tc_loop);       %          fclose(fid);       %          if get(h_push_stop,'Userdata'), break; end       %       end   case 'Normal'       eval('tc','nelerror(lasterr); msdl(0);');   end   if (ishandle(h_fig)) % if TC fig was not closed by 'tc' (after save)      set(h_push_stop,'Enable','off');      set(h_push_start,'Enable','on');      set(h_push_recall,'Enable','off');      set(h_push_close,'Enable','on');      set(h_push_params,'Enable','on');   end	elseif strcmp(command_str,'stop')	set(h_push_stop,'Userdata','stop');	elseif strcmp(command_str,'params')	h_tc_params = view_tc_params;    uiwait(h_tc_params);    tuning_curve('start')	elseif strcmp(command_str,'recall')    set(h_push_stop,'Userdata','saveNquit');    % 	read_tc_text_file;    % 	set(h_push_stop,'Enable','off');    % 	set(h_push_recall,'Enable','on');    % 	set(h_push_close,'Enable','on');    % 	set(h_push_params,'Enable','on');    % 	drawnow;    % 	elseif strcmp(command_str,'close')    % cd(fullfile(strtok(matlabroot,filesep),'matlab_user','tuning_curve','functions'));	close('Tuning Curve Maker');end