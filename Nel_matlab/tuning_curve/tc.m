% filename = strcat(FILEPREFIX,num2str(FNUM),'.m');global root_dir NelData%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MGH:  Simulate real TC for TCdevelopment on Providencehost=lower(getenv('hostname'));host = host(~isspace(host));%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%filename = current_data_file('tc');Channel = 1;frqlo = PARAMS(1);frqhi = PARAMS(2);octaves = log2(frqhi/frqlo);linstps = PARAMS(3);logstps = PARAMS(4);if logstps > 0    frqlst=logspace(log10(frqhi),log10(frqlo),octaves*logstps);elseif logstps < 0    frqlst=Qspace(frqhi,frqlo,-logstps);else    frqlst=linspace(frqhi,frqlo,octaves*linstps);endfrqnum = length(frqlst);attlo  = PARAMS(5);attstp = PARAMS(7);atthi  = PARAMS(6);atten  = attlo;ear = PARAMS(10);left  = 1;right = 2;config(1) = struct('atten',[1 0],'sel',[0 7],'conn',[2 0]); %left ear select codeconfig(2) = struct('atten',[0 1],'sel',[7 4],'conn',[0 1]); %right ear select codeconfig(3) = struct('atten',[1 1],'sel',[0 4],'conn',[2 1]); %both ears selectedToneOn  = PARAMS(11);ToneOff = PARAMS(12);tspan = (ToneOn+ToneOff)/1000;handles = get(gcf,'Userdata');h_ax1   = handles(8);if (ishandle(h_ax1))    delete(h_ax1);endh_ax1 = axes('position',[.1 .415-0.08 .8 .56+0.08]);handles(8) = h_ax1;set(gcf,'Userdata',handles);h_line1 = semilogx(50,0,'r-','LineWidth',2);hold on;h_line2 = plot(50,0,'wo','MarkerSize',6);h_line3 = plot(50,0,'yx','MarkerSize',12);axis([frqlo frqhi -atthi-5 -attlo+5]);set(h_ax1,'XTick',[frqlo+.000001 frqhi],'TickDir','out');set(h_ax1, 'XTick', ...    unique(min(frqhi,max(frqlo, [frqlo+.000001 0.1 0.2 0.4 1 2 4 7 10 15 20:10:50 100 frqhi]))));set(h_ax1, 'XMinorTick', 'off');set(h_ax1,'YTick',-120:20:0);xlabel('Frequency (kHz)','fontsize',14);ylabel('Attenuation (dB)','fontsize',14);set(h_ax1,'Color',[0.3 0.3 0.3]);drawnow;match2    = PARAMS(8);crit = PARAMS(9);tcdata = zeros(frqnum,2);search = 'on';RespWin1= PARAMS(13)/1000;RespWin2= PARAMS(14)/1000;SponWin1= PARAMS(15)/1000;SponWin2= PARAMS(16)/1000;SponSamp1= PARAMS(17);SponSamp2= PARAMS(18);%% Setup and run inv_calib filter for all of TCsif NelData.General.RP2_3and4 || NelData.General.RX8    cdd;    allCalibs= dir('p*calib*raw*');    all_calib_picNums= cell2mat(cellfun(@(x) getPicNum(x), {allCalibs.name}', 'UniformOutput', false));    CalibPicNum = inputdlg('Enter RAW Calibration Pic number:                [Cancel]=Use average calibration','Calibration Pic',1,{num2str(max(all_calib_picNums))});    if ~isempty(CalibPicNum)        CalibPicNum = str2double(CalibPicNum{1});    else        CalibPicNum = 1;    end    % Check if calib file exists    tempLIST=dir(sprintf('p%04d_calib*raw*',CalibPicNum));    if isempty(tempLIST)        warning('raw Calib file does not exist')        return;    end             %AS/MP | inverse filtering,    % send the raw calib pic num to set_invFilter    % pull the inv calibration coefficients from        filttype = {'inversefilt','inversefilt'};    %Now loading INVERSE calib.    invfiltdata = set_invFilter(filttype, CalibPicNum);     % save Calib # in NelData for general use (eg in data file saving)    NelData.File_Manager.CalibPICnum2use =invfiltdata.CalibPICnum2use;    rdd;    else    cdd;    allCalibFiles= dir('*calib*raw*');    CalibPICnum2use= getPicNum(allCalibFiles(end).name);    CalibPICnum2use= str2double(inputdlg('Enter RAW Calibration File Number','Load Calib File', 1,{num2str(CalibPICnum2use)}));    NelData.File_Manager.CalibPICnum2use =CalibPICnum2use;    rdd;endif SponSamp1      %user has elected to sample spont1    set(h_text7,'String','Collecting SR1...');        %    spont1 = 0;    msdl(1,Channel);        %    RPco1=actxcontrol('RPco.x',[0 0 1 1]);    %    invoke(RPco1,'Connect',4,1);    RPco1= connect_tdt('RP', 1);    invoke(RPco1,'LoadCof',[root_dir 'tuning_curve\object\sr.rco']);    invoke(RPco1,'Run');    neltimer(SponSamp1);    spk = msdl(2);    spont1 = size(spk{Channel},1) / SponSamp1;        invoke(RPco1,'Halt');    msdl(0);end% RPco1=actxcontrol('RPco.x',[0 0 1 1]);% rc = rc & invoke(RPco1,'Connect',4,1);[RPco1, rc]= connect_tdt('RP2', 1);rc = rc & invoke(RPco1,'LoadCof',[root_dir 'tuning_curve\object\tc_left.rco']);rc = rc & invoke(RPco1,'SetTagVal','Select_L',config(ear).sel(left));rc = rc & invoke(RPco1,'SetTagVal','Connect_L',config(ear).conn(left));rc = rc & invoke(RPco1,'SetTagVal','StmOn',ToneOn);rc = rc & invoke(RPco1,'SetTagVal','StmOff',ToneOff);rc = rc & invoke(RPco1,'Run');if (rc ~= 1)    nelerror('tc.m: can''t load tc_left to RP #1');end% rc = 1;% RPco2=actxcontrol('RPco.x',[0 0 1 1]);% rc = rc & invoke(RPco2,'Connect',4,2);[RPco2, rc]= connect_tdt('RP2', 2);rc = rc & invoke(RPco2,'LoadCof',[root_dir 'tuning_curve\object\tc_right.rco']);rc = rc & invoke(RPco2,'SetTagVal','Select_R',config(ear).sel(right));rc = rc & invoke(RPco2,'SetTagVal','Connect_R',config(ear).conn(right));rc = rc & invoke(RPco2,'Run');if (rc ~= 1)    nelerror('tc.m: can''t load tc_right to RP #2');end% PAco1=actxcontrol('PA5.x',[0 0 1 1]);for atten_num = 1:4    %    invoke(PAco1,'Connect',4,atten_num);    %    invoke(PAco1,'SetAtten',120.0);    invoke(connect_tdt('PA5', atten_num),'SetAtten', 120.0);endif config(ear).atten(left)    % SP: don't reconnect: use connect_tdt function. Faster because- instead of reconnecting, use handle to already connected TDT module.    %     invoke(PAco1,'Connect',4,1);    %     invoke(PAco1,'SetAtten',0);    invoke(connect_tdt('PA5', 1),'SetAtten', 0);        %     invoke(PAco1,'Connect',4,3);    %     invoke(PAco1,'SetAtten',atten);    invoke(connect_tdt('PA5', 3),'SetAtten', atten);else    %     invoke(PAco1,'Connect',4,1);    %     invoke(PAco1,'SetAtten',120.0);    invoke(connect_tdt('PA5', 1),'SetAtten', 120);        %     invoke(PAco1,'Connect',4,3);    %     invoke(PAco1,'SetAtten',120.0);    invoke(connect_tdt('PA5', 3),'SetAtten', 120);endif config(ear).atten(right)    %     invoke(PAco1,'Connect',4,2);    %     invoke(PAco1,'SetAtten',0);    invoke(connect_tdt('PA5', 2),'SetAtten', 0);        %     invoke(PAco1,'Connect',4,4);    %     invoke(PAco1,'SetAtten',atten);    invoke(connect_tdt('PA5', 4),'SetAtten', atten);else    %     invoke(PAco1,'Connect',4,2);    %     invoke(PAco1,'SetAtten',120.0);    invoke(connect_tdt('PA5', 2),'SetAtten', 120);        %     invoke(PAco1,'Connect',4,4);    %     invoke(PAco1,'SetAtten',120.0);    invoke(connect_tdt('PA5', 4),'SetAtten', 120);endrun=1;timeCount= [];msdl(1,Channel);stimNum= 0;%% Main loopwhile run <= frqnum    if get(h_push_stop,'Userdata'), break; end    new_freq = 0;        %% Allow doubling or halving of freqstep size    if get(h_push_d_fstep,'Userdata')        switch (get(h_push_d_fstep,'Userdata'))            case 'double'                fact=2.0;            case 'halve'                fact=0.5;        end        set(h_push_d_fstep,'Userdata',[])        octaves = log2(frqlst(run-1)/frqlo);        if logstps > 0            logstps=round(logstps*fact);            newfrqlst=logspace(log10(frqlst(run-1)),log10(frqlo),octaves*logstps);            log_txt='yes'; step_txt=logstps;        elseif logstps < 0            logstps=round(logstps*fact);            newfrqlst=Qspace(frqlst(run-1),frqlo,-logstps);            log_txt='Q'; step_txt=abs(logstps);        else            linstps=round(linstps*fact);            newfrqlst=linspace(frqlst(run-1),frqlo,octaves*linstps);            log_txt='no'; step_txt=linstps;        end        if(length(newfrqlst)>1)            frqlst=[frqlst(1:run-1) newfrqlst(2:end)];        end        frqnum = length(frqlst);        set(h_text4b,'String',{step_txt; ' '; log_txt})    end        freq = frqlst(run);    level_stk = zeros(1,6);    invoke(RPco1,'SetTagVal','Freq',freq*1000);    while isempty(get(h_push_stop,'Userdata'))  		%check for stop here        %        msdl(1,Channel);        %       DRnow = 0;        %       SRnow = 0;        if config(ear).atten(left)            %          invoke(PAco1,'Connect',4,3);            %          invoke(PAco1,'SetAtten',atten);            invoke(connect_tdt('PA5', 3),'SetAtten', atten);        end        if config(ear).atten(right)            %          invoke(PAco1,'Connect',4,4);            %          invoke(PAco1,'SetAtten',atten);            invoke(connect_tdt('PA5', 4),'SetAtten', atten);        end        set(h_line2,'XData',freq,'YData',-atten);        drawnow;        invoke(RPco1,'SoftTrg',1);        neltimer(tspan);        spk = msdl(2);        stimNum= stimNum+1;        %        time = spk{Channel}(:,2);                loop_index_num= spk{Channel}(:,1);        loop_spike_times= spk{Channel}(:,2);        time = loop_spike_times(loop_index_num==stimNum);        DRnow = length(find(time>RespWin1 & time<RespWin2));        SRnow = length(find(time>SponWin1 & time<SponWin2));        %        msdl(0);                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %%%% MGH:  Simulate real TC for TCdevelopment on Providence        switch (host)            case {'providence','audi'}                R=5;  % dB range for 5*crit+5                simBF=1;  % 1 kHz BF                simthr=-110; % -80 dB threshold                A=crit;                B=1/R*log((5*(crit+1))/crit);                idiffMEAN=A*exp(B*(-atten-simTC(freq,simBF,simthr)));                idiff=max(0,randn*idiffMEAN/1.8+idiffMEAN);            otherwise                idiff = DRnow - SRnow;        end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                if strcmp(search,'on') && idiff>(5*crit+5)            search = 'off';            new_freq = 1;        else            level_stk(2:6) = level_stk(1:5);            level_stk(1) = atten;            if idiff>crit                atten = atten + attstp;                if atten <= atthi                    if (match2==1 && atten==level_stk(3)) || (match2==2 && atten==level_stk(3) && atten==level_stk(6))                        if strcmp(search,'on'), search = 'off'; end                        new_freq = 1;                    end                else  % M Heinz 05Oct2004: If threshold not found, i.e., sound level cannot be set low enough,                    %%%%  Set to 1 dB beyond highest atten, to indicate Threshold NOT FOUND                    atten=atthi+1;                    %                disp('Setting atten=atthi+1!')                    if unique(level_stk)==(atthi+1)                        if strcmp(search,'on'), search = 'off'; end                        new_freq = 1;                        atten=atthi;                        NelData.File_Manager.unit.comment=sprintf('Threshold > %.f dB SPL, Stored as %.f dB SPL',atthi,atthi);                        nelerror(NelData.File_Manager.unit.comment);                    end                end            else                atten = atten - 2*attstp;                if atten < attlo, atten = attlo; new_freq = 1; end            end        end        %if new freq, plot thresh and break        if new_freq == 1            %save threshold            tcdata(run,:) = [freq atten];            set(h_line1,'XData',tcdata(1:run,1),'YData',-tcdata(1:run,2));                        %%% Find current BF            loc = find(tcdata(1:run,2)==max(tcdata(1:run,2)), 1 );            thresh = tcdata(loc(1),2);            bf = tcdata(loc(1),1);            set(h_line3,'XData',bf,'YData',-thresh);                        drawnow;            atten = max(attlo,atten-12); %don't reset atten all the way back to attenlo            set(h_push_start,'Userdata',tcdata);                        text_str = sprintf('%s %4.3f %s %4.1f %s\n%s %5.1f %s\n\n%s %6.3f %s\n%s %4.2f %s','Last Thresh:', ...                tcdata(run,1),'kHz and',tcdata(run,2),'dB att.', 'Last SR:',SRnow/(SponWin2-SponWin1), ...                'sp/s.','BF:',bf,'kHz.','Thresh:',thresh,'dB atten.');            set(h_text7,'String',text_str,'Interpreter','none');            run=run+1;            break;   %% Break out of current-frequency loop        end    end  %% Loop to find threshold at current freq    end  %Step through all freqsmsdl(0);%%if (isempty(get(h_push_stop,'UserData')))  %% Went through all freqs, i.e., finished on its own    set(h_push_stop,'Userdata','stop');endNelData.TC.rc=get(h_push_stop,'Userdata');set(h_push_stop,'Userdata',[]);%% USE NelData.TC.rc as a return flag%% Leave TC window open when data is saved ow/ close window!%% Shut down TDT: Needed for all stop conditions (stop, savenquit, restart, abort)for atten_num = 1:4    %    invoke(PAco1,'Connect',4,atten_num);    %    invoke(PAco1,'SetAtten',120.0);    invoke(connect_tdt('PA5', atten_num),'SetAtten', 120.0);endinvoke(RPco1,'Halt');invoke(RPco2,'Halt');%% Shut off INV caliib filter if NelData.General.RP2_3and4 || NelData.General.RX8    filttype = {'allstop','allstop'};    invfiltdata = set_invFilter(filttype,1);endset(h_line2,'XData',1e-10,'YData',0);set(h_push_start,'Enable','off');set(h_push_stop,'Enable','off');set(h_push_h_fstep,'Enable','off');set(h_push_d_fstep,'Enable','off');set(h_push_restart,'Enable','off');set(h_push_abort,'Enable','off');set(h_push_saveNquit,'Enable','off');set(h_push_close,'Enable','off');set(h_push_params,'Enable','off');set(h_text3,'buttondownfcn','');set(h_text4,'buttondownfcn','');set(h_text5,'buttondownfcn','');set(h_text6,'buttondownfcn','');%%% Switch on end on data-collection loopswitch NelData.TC.rc    case 'change_attens/freqs'        def.Low_Atten={PARAMS(5) 'dB' [0 120]};        def.High_Atten={PARAMS(6) 'dB' [0 120]};        def.Low_Freq={PARAMS(1) 'kHz' [0.04 45]};        def.High_Freq={PARAMS(2) 'kHz' [0.04 45]};                dlg_pos=[40.9600   16  122.8800   13.5000];        inp = structdlg(def, 'Change Attenuation/Frequency Limits',struct([]),'on',[],dlg_pos);        PARAMS(5)=inp.Low_Atten;        PARAMS(6)=inp.High_Atten;        PARAMS(1)=inp.Low_Freq;        PARAMS(2)=inp.High_Freq;        clear def inp        eval('update_tc_params');		% use function update_tc_params to rewrite the file        NelData.TC.rc='restart';        return;    case 'abort'        tuning_curve('close');        return;    case 'restart'        return;    case 'stop'        if SponSamp2      %user has elected to sample spont2            set(h_text7,'String','Collecting SR2...');                        spont1 = 0;            msdl(1,Channel);                        RPco1=actxcontrol('RPco.x',[0 0 1 1]);            invoke(RPco1,'Connect',4,1);            invoke(RPco1,'LoadCof',[root_dir 'tuning_curve\object\sr.rco']);            invoke(RPco1,'Run');            neltimer(SponSamp2);            spk = msdl(2);            spont2 = size(spk{Channel},1) / SponSamp2;                        invoke(RPco1,'Halt');            msdl(0);        end                last_stim=run-1;        loc = find(tcdata(1:last_stim,2)==max(tcdata(1:last_stim,2)), 1 );        thresh = tcdata(loc(1),2);        bf = tcdata(loc(1),1);        set(h_text7,'UserData',get(h_text7,'Color'));        text_str = sprintf('%s\n%s\n\n%s %6.3f %s\n%s %4.2f %s','*** Verify BF ***','(click here for Cursor mode)', ...            'BF:',bf,'kHz.','Thresh:',thresh,'dB atten.');        set(h_text7,'String',text_str,'Interpreter','none','Color','b');                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %%% Loop to wait for verifying BF        set(h_push_restart,'Enable','on');        set(h_push_abort,'Enable','on');        set(h_push_saveNquit,'Enable','on');        set(h_push_params,'Enable','on');                set(h_ax1,'ButtonDownFcn','tuning_curve(''user_newBFmouse'');')        set(h_line1,'ButtonDownFcn','tuning_curve(''user_newBFmouse'');')        set(h_ax1,'UserData',[])        set(h_ax2,'ButtonDownFcn','tuning_curve(''user_newBFkey'');')  % Special cursor-key mode!        set(h_text7,'ButtonDownFcn','tuning_curve(''user_newBFkey'');')        Xlimits1=get(h_ax1,'Xlim');   Ylimits1=get(h_ax1,'Ylim');        BFstate='wait';        figure(h_fig); %% Needed from some reason, to keep focus on TCfig        set(gcf,'CurrentCharacter','x')                while 1==1       % Wait for verifying BF to complete            pause(.1)            if ~isempty(get(h_push_stop,'Userdata'))                break;            elseif get(h_ax1,'Userdata')                BFstate=get(h_ax1,'Userdata');                set(h_ax1,'UserData',[]);                figure(h_fig); %% Needed from some reason, to keep focus on TCfig            end                        while ~strcmp(BFstate,'wait')   %%% if user input to update BF                switch BFstate                    case 'user_newBFmouse'  %%%%   ('Mouse-Button press')                        clickpos=get(h_ax1,'CurrentPoint');                        if(clickpos(1,1)>=Xlimits1(1))&&(clickpos(1,1)<=Xlimits1(2))&&(clickpos(1,2)>=Ylimits1(1))&&(clickpos(1,2)<=Ylimits1(2))                            [yind,loc]=min(abs(tcdata(1:last_stim,1)-clickpos(1,1)));                        end                        BFstate='wait';                                            case 'user_newBFkey'   %%%% ('Key press')  Stay here until mouse click (back to mouse mode) or 'Return' for Save                        text_str = sprintf('%s\n%s\n\n%s %6.3f %s\n%s %4.2f %s','*** Verify BF ***','(click for Mouse mode; Return to Save)', ...                            'BF:',bf,'kHz.','Thresh:',thresh,'dB atten.');                        set(h_text7,'String',text_str,'Interpreter','none','Color','b');                        w = waitforbuttonpress;                        if w == 0   %%%%   ('Mouse-Button press')                            BFstate='wait';  % Go back to mouse mode                            set(h_ax1,'UserData',[]);                        else    %%%% ('Key press')                            keypress=get(gcf,'CurrentCharacter');                                                        switch double(keypress)                                case 13  %%% 'RETURN'                                    set(h_push_stop,'Userdata','saveNquit');                                    BFstate='wait';                                    break;                                case 28  %%% 'LEFT cursor'                                    loc=min(last_stim,loc+1);                                case 29  %%% 'RIGHT cursor'                                    loc=max(1,loc-1);                            end                        end                end                thresh = tcdata(loc,2);                bf = tcdata(loc,1);                set(h_line3,'XData',bf,'YData',-thresh);                switch BFstate                    case 'wait'  %%%%   ('Mouse mode')                        text_str = sprintf('%s\n%s\n\n%s %6.3f %s\n%s %4.2f %s','*** Verify BF ***','(click here for Cursor mode)', ...                            'BF:',bf,'kHz.','Thresh:',thresh,'dB atten.');                    case 'user_newBFkey'   %%%% ('Cursor Mode')                        text_str = sprintf('%s\n%s\n\n%s %6.3f %s\n%s %4.2f %s','*** Verify BF ***','(click for Mouse mode; Return to Save)', ...                            'BF:',bf,'kHz.','Thresh:',thresh,'dB atten.');                end                set(h_text7,'String',text_str,'Interpreter','none','Color','b');            end  % End update BF based on user input                    end  % End wait for verifying BF        set(h_text7,'Color',get(h_text7,'UserData'))        set(h_ax1,'ButtonDownFcn','')        set(h_line1,'ButtonDownFcn','')        NelData.TC.rc=get(h_push_stop,'Userdata');        set(h_push_stop,'Userdata',[]);                switch NelData.TC.rc            case 'abort'                tuning_curve('close');                return;            case 'restart'                return;            case 'params'                h_tc_params = view_tc_params;                uiwait(h_tc_params);                tuning_curve('start');                return;            case 'saveNquit'                set(h_push_restart,'Enable','off');                set(h_push_abort,'Enable','off');                set(h_push_saveNquit,'Enable','off');                set(h_push_params,'Enable','off');                                fprintf('Estimated BF = %.4f   Threshold = %.4f\n', bf, thresh);                NelData.TC.BF = bf;                NelData.TC.Th = thresh;                set(h_line3,'XData',bf,'YData',-thresh);                                if SponSamp1                    line1 = sprintf('%s %5.1f %s','First SR average is',spont1,'sp/s.');                else                    line1 = sprintf('%s','First SR was not sampled.');                end                                if SponSamp2                    line2 = sprintf('%s %5.1f %s','Second SR average is',spont2,'sp/s.');                else                    line2 = sprintf('%s','Second SR was not sampled.');                end                                text_str = sprintf('%s %6.3f %s\n%s %4.1f %s\n%s\n%s',...                    'Best frequency is',bf,'kHz.',...                    'Threshold is',thresh,'dB atten.',...                    line1,...                    line2);                set(h_text7,'String',text_str);                                dlg_pos=[40.9600   1.5  122.8800   15.5000];                %       %% M Heinz 05Oct2004: If Threshold is < 120 dB SPL, we need to hack through Alon's 120 dB SPL limit in the new_unit dialog box                %       if (NelData.TC.Th==atthi+1)&(atthi>=120),                %          fixHACK=1;                %          NelData.TC.Th=120                %       end                new_unit(NelData.File_Manager.unit.No,[],NelData.TC,'on',dlg_pos,1);                %       if exist('fixHACK','var')                %          NelData.TC.Th=atthi+1;                %          clear fixHACK                %       end                                comment=NelData.File_Manager.unit.comment;                [filename, shortfname] = current_data_file('tc');                make_tc_text_file;                text_str = sprintf('%s %s\n\n%s %6.3f %s\n%s %4.1f %s\n%s\n%s','Saved data file: ',shortfname, ...                    'Best frequency is',bf,'kHz.',...                    'Threshold is',thresh,'dB atten.',...                    line1,...                    line2);                set(h_text7,'String',text_str,'FontSize',10);                update_tc_params;                filename = current_data_file('tc');                set(h_push_close,'Enable','on');                uiresume;                return;        endend