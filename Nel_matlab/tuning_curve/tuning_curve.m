function h_fig = tuning_curve(command_str)%THIS IS THE MAIN PROGRAM FOR THE SR530 LOCK-IN AMP%     MAJOR FUNCTION CALLS ARE:%THE FOLLOWING GLOBAL PARAMETERS ARE SHARED ACROSS FUNCTIONSglobal PARAMS PROG VERSION global root_dir NelDatah_fig = findobj('Tag','TC_Main_Fig');    %% Finds handle for TC-Figureif nargin < 1						   %program should be called without a command string        if strcmp(computer,'PCWIN')	%set path characters for PC or MAC        is_enabled = 'on';    elseif strcmp(computer,'MAC2')        is_enabled = 'off';    end        is_enabled = 'on';        PARAMS = zeros(1,18);				%initialize before opening parameter files    PROG = 'TCrp2.m';						%program name is recorded in the data file    DATE = date;    VERSION = 'Nel';    eval('get_tc_ins');							   %open stimulus parameters        PARAMS(1) = frqlo;     %low frequency (in kHz) bounds for data    PARAMS(2) = frqhi;     %high frequency (in kHz) bounds for data    PARAMS(3) = fstlin;    % # of linear frequency steps (set = 0 for log steps)    PARAMS(4) = fstoct;    % # of log freq. steps (per oct. OR per 10-dB BW for Qspaced) (= 0 for lin steps; NEGATIVE for Qspaced)    PARAMS(5) = attlo;     %low atten (in dB) bounds for auto tracking    PARAMS(6) = atthi;     %high stten (in dB) bounds for auto tracking    PARAMS(7) = attstp;    %initial atten step size    PARAMS(8) = match2;    %criterion for threshold repeat (1 or 2)    PARAMS(9) = crit;      %criterion for response in SDs above spont    PARAMS(10)= ear;       %code for select/connect and attenuators    PARAMS(11)= ToneOn;      %tone on duration in ms    PARAMS(12)= ToneOff;      %tone off duration in ms    PARAMS(13)= RespWin1;      %onset of resp sps sampling    PARAMS(14)= RespWin2;      %end of resp sps sampling    PARAMS(15)= SponWin1;      %onset of spon sps sampling    PARAMS(16)= SponWin2;      %end of spon sps sampling    PARAMS(17)= SponSamp1;      %flag to disable spont sample before and after TC (0=no sample)    PARAMS(18)= SponSamp2;      %flag to disable spont sample before and after TC (0=no sample)            command_str = 'initialize';		%set command string to initialize graphic interfaceendif ~strcmp(command_str,'initialize')		%you're returning via callback, retrieve figure handles    load(fullfile(root_dir,'tuning_curve','workspace','tcbjm'));    handles = get(h_fig,'Userdata');    h_text1 = handles(1);    h_text2 = handles(2);    h_text3 = handles(3);    h_text4 = handles(4);    h_text5 = handles(5);    h_text6 = handles(6);    h_text7 = handles(7);    h_ax1   = handles(8);    h_line1 = handles(9);    h_ax2   = handles(10);    h_ax3   = handles(11);    h_push_stop  = handles(12);    h_push_start = handles(13);    h_push_close = handles(14);    h_push_params = handles(15);    h_push_saveNquit = handles(16);    h_push_restart = handles(17);    h_push_abort = handles(18);    h_push_d_fstep = handles(19);    h_push_h_fstep = handles(20);    h_text3b = handles(21);    h_text4b = handles(22);    h_text5b = handles(23);    h_text6b = handles(24);        tcdata = get(h_push_start,'Userdata');endif strcmp(command_str,'initialize')		   %initialize and display GUI    if (ishandle(h_fig))        delete(h_fig);    end    h_fig = figure('NumberTitle','off','Name','Tuning Curve Maker','Units','normalized',...        'Visible','off', 'position',[0.045  0.045  0.9502  0.7474],'MenuBar','none','Tag','TC_Main_Fig');    colordef none;    whitebg('w');        %the following text handles are used to display parameters    if PARAMS(4) == 0        log_txt = 'no';    elseif PARAMS(4) > 0        log_txt = 'yes';    else        log_txt = 'Q';   % Qsteps: saved in log steps as Negative Value    end        step_txt = max(PARAMS(3), abs(PARAMS(4)));        switch PARAMS(10)        case 1            ear_txt = 'left';        case 2            ear_txt = 'right';        case 3            ear_txt = 'both';    end        eval('tcplot');        % put everything in a handle for the call back    handles = [h_text1, h_text2, h_text3, h_text4, h_text5, h_text6, h_text7, h_ax1, h_line1, h_ax2, h_ax3, ...        h_push_stop, h_push_start, h_push_close, h_push_params, h_push_saveNquit, h_push_restart, h_push_abort, ...        h_push_d_fstep, h_push_h_fstep, h_text3b, h_text4b, h_text5b, h_text6b];    set(h_fig,'Userdata',handles);    %save the workspace so you can return to this point on callback from other functions    feval('save',fullfile(root_dir,'tuning_curve','workspace','tcbjm'),'PARAMS','PROG','VERSION');    set(h_fig,'Visible','on');    tuning_curve('start'); % Auto start    elseif strcmp(command_str,'return from parameter change')        if PARAMS(4) == 0        log_txt = 'no';    elseif PARAMS(4) > 0        log_txt = 'yes';    else        log_txt = 'Q';    end        step_txt = max(PARAMS(3), abs(PARAMS(4)));        switch PARAMS(10)        case 1            ear_txt = 'left';        case 2            ear_txt = 'right';        case 3            ear_txt = 'both';    end        set(h_text2,'String',{PROG date fliplr(strtok(fliplr(current_data_file),filesep))});    set(h_text4,'string', {PARAMS(1); PARAMS(2)});    set(h_text4b,'string', {step_txt; ''; log_txt});    set(h_text6,'string', {PARAMS(5); PARAMS(6)});    set(h_text6b,'string', {PARAMS(7); ear_txt});    set(h_push_saveNquit,'Enable','off');    set(h_push_close,'Enable','on');    set(h_push_params,'Enable','on');    elseif strcmp(command_str,'start')    if(isfield(NelData,'TC'))        tuning_curve('return from parameter change');  % This is a RESTART: Reset param list    end    set(h_text1,'Visible','off');    set(h_text2,'Visible','off');    set(h_push_stop,'Enable','on');    set(h_push_d_fstep,'Enable','on');    set(h_push_h_fstep,'Enable','on');    set(h_push_abort,'Enable','on');    set(h_push_restart,'Enable','on');    set(h_push_start,'Enable','off');    set(h_push_saveNquit,'Enable','off');    set(h_push_close,'Enable','off');    set(h_push_params,'Enable','off');    set(h_text3,'buttondownfcn','tuning_curve(''change_attens/freqs'');');    set(h_text4,'buttondownfcn','tuning_curve(''change_attens/freqs'');');    set(h_text5,'buttondownfcn','tuning_curve(''change_attens/freqs'');');    set(h_text6,'buttondownfcn','tuning_curve(''change_attens/freqs'');');        error = 0;    tcdata = zeros(120,2);    set(h_push_stop,'Userdata',[]);    set(h_push_start,'Userdata',tcdata);        %****** Data collection loop ******    eval('tc','nelerror(lasterr); msdl(0);');    if strcmp(NelData.TC.rc,'restart')        tuning_curve('start');    end        elseif strcmp(command_str,'stop')    set(h_push_stop,'Userdata','stop');    elseif strcmp(command_str,'restart')    set(h_push_stop,'Userdata','restart');    elseif strcmp(command_str,'abort')    set(h_push_stop,'Userdata','abort');    elseif strcmp(command_str,'params')    set(h_push_stop,'Userdata','params');    elseif strcmp(command_str,'d_fstep')    set(h_push_d_fstep,'Userdata','double');    elseif strcmp(command_str,'h_fstep')    set(h_push_d_fstep,'Userdata','halve');    elseif strcmp(command_str,'change_attens/freqs')    set(h_push_stop,'Userdata','change_attens/freqs');    elseif strcmp(command_str,'user_newBFmouse')    set(h_ax1,'Userdata','user_newBFmouse');    elseif strcmp(command_str,'user_newBFkey')    set(h_ax1,'Userdata','user_newBFkey');    elseif strcmp(command_str,'saveNquit')    set(h_push_stop,'Userdata','saveNquit');    elseif strcmp(command_str,'close')    close('Tuning Curve Maker');end