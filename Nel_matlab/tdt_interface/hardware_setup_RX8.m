function hardware_setup_RX8
% hardware_setup_Mouselab - Hardware setup & variable initialization
%         Note that the name of the 'params' and 'params_in' fields are the names of the 
%         activeX tags defined in the RCO files.
%         This convention should apply for user defined parameters as well, 
%         for a standardized matlab-tdt interface (see 'RPset_params' and 'RPget_params')

% AF 3/28/02
% LQ 02/17/05 Modified on hardware_setup_default, use RX6 instead of RP2
% MW 11/10/2014 Modified from hardware_setup_mouselab(Qian's code)
%               for use on RX8 setup instead of RX6

global root_dir
global RP PA Trigger SwitchBox TDT_interface
global default_rco devices_names_vector hardwired_devices

TDT_interface = 'GB'; % LQ 09/23/03 TDT_interface = 'USB' or 'GB'
% zBusReset;   % GQ added 7-06-11 to reset Hardware %MKW commented out
% MKW testing 01-21-2015

RP = struct('rco_file',  {default_rco} ...
   , 'activeX',   {[]} ...
   , 'params',    {[]} ...
   , 'params_in', {[]} ...
   , 'serial_no', {1} ...
   , 'nchannels', {2} ...
   , 'peak_amp_volt',{5} ...
   , 'sampling_rate', {0} ...
   , 'cycle_usage', {0} ...
   , 'isRX8',{1} ... 
   ); % LQ 03/08/05 add one field isRX6 to identify system using RX6 instead of RP2s
      % MW 10/08/2014 changed isRX6 to isRX8 for one RX8 instead of RX6

PA = struct('activeX', {[] [] [] []} ...
   , 'attn', {-1 -1 -1 -1} ...
   , 'serial_no', {1 2 3 4} ...
   );

params = struct('StmOn', 0 ...
   , 'StmOff', 0 ...
   , 'StmNum', 0 ...
   );
paramsin = struct('Stage', 0 ...
   , 'CurN', 0 ...
   );
Trigger = struct('params', params ...
   , 'params_in', paramsin  ...
   , 'activeX', [] ...
   , 'RP_index', 1  ...
   );

% One important issue!!! The Ground option (in select_key, select_res1 and select_res2) should always be the last option!
% If you want to change this convention, please make the appropriate changes in SBfind_route.
select_key  = [          2                    0                     1                    4                    5                     3                    6                    7           ];
select_res1 = [ [0 0 0 0 1 0 0 0 0]' [0 0 0 0 0 1 0 0 0]'  [0 0 0 0 0 1 1 0 0]'  [0 0 0 0 0 0 0 1 0]' [0 0 0 0 0 0 0 0 1]' [0 1 0 0 0 0 0 0 0]' [1 0 0 0 0 0 0 0 0]' [0 0 0 0 0 0 0 0 0]' ];
select_res2 = [ [0 0 0 0 1 0 0 0 0]' [0 0 0 0 0 0 0 1 0]'  [0 0 0 0 0 0 0 1 1]'  [0 0 0 0 0 1 0 0 0]' [0 0 0 0 0 0 1 0 0]' [0 0 0 1 0 0 0 0 0]' [0 0 1 0 0 0 0 0 0]' [0 0 0 0 0 0 0 0 0]'];
% Element order for select_res is: L6  L3  R6  R3  KH-oscillator  RP1-ch1 RP1-ch2 RP2-ch1 RP2-ch2
connect_key  = [  0      2       1      3   ];
connect_res1 = [[0 0]' [0 1]', [1 0]' [1 1]'];
connect_res2 = [[0 0]' [0 1]', [1 0]' [1 1]'];
% connect_key  = [  0      2       1      3    4];
% connect_res1 = [[0 0 0]' [0 1 0]', [1 0 0]' [1 1 0]' [0 0 1]'];
% connect_res2 = [[0 0 0]' [0 1 0]', [1 0 0]' [1 1 0]' [0 0 1]'];
% Element order for connect_res is: Left-channel  Right-channel

devices_names_vector = {'L6'  'L3'  'R6'  'R3'  'KH-oscillator' 'RP1-ch1' 'RP1-ch2' 'RP2-ch1' 'RP2-ch2'};
hardwired_devices    = [  0     0     0     0         0            0         0        0         0    ];

params = struct('ByteA', -1, ...
    'ByteB', -1 ...
   );
SwitchBox = struct('select_key',{select_key select_key} ...
   , 'select_res', {select_res1 select_res2} ...  
   , 'connect_key',{connect_key} ...
   , 'connect_res', {connect_res1 connect_res2} ...  
   , 'params', {params} ...
   , 'prev_params', {params} ...
   , 'activeX', {[]} ...
   );

